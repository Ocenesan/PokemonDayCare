This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-06-20T13:11:52.639Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
index.html
LICENSE
naming.html
package.json
README.md
src/counter.js
src/game/Pet.js
src/game/PokeAPIService.js
src/main.js
src/profile.css
src/scenes/ChoosePokemonScene.js
src/scenes/HomescreenScene.js
src/scenes/MainGameScene.js
src/scenes/NamingScene.js
src/scenes/SearchPokemonScene.js
src/style.css
src/ui/EvolutionPopup.js
src/ui/FeedPopup.js
src/ui/GameOverPopup.js
src/ui/InventoryPopup.js
src/ui/ProfilePopup.js
src/ui/WonPopup.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pokemon Daycare</title>
    <link rel="stylesheet" href="/src/style.css">
  </head>
  <body>
    <div id="game-container"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

================
File: LICENSE
================
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

================
File: naming.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Naming Pokemon</title>
  <link rel="stylesheet" href="css/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Aldrich&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Pixelify+Sans&display=swap" rel="stylesheet">
</head>
<body>
<div id="page2">
  <div class="container">

    <!-- STATUS LEFT -->
    <div class="status-panel">
        <!-- STATUS TIRED -->
        <div class="status-bar">
            <div class="label">TIRED: <span id="tired-value">0</span></div>
            <div class="bar">
              <img src="images/icons/progress1.png" alt="status" class="status">
            </div>
        </div>

        <!-- STATUS HUNGER -->
        <div class="status-bar">
            <div class="label">HUNGER: <span id="hunger-value">0</span></div>
            <div class="bar">
                <img src="images/icons/progress1.png" alt="status" class="status">
            </div>
        </div>

        <!-- STATUS BOREDOM -->
        <div class="status-bar">
            <div class="label">BOREDOM: <span id="boredom-value">0</span></div>
            <div class="bar">
                <img src="images/icons/progress1.png" alt="status" class="status">
            </div>
        </div>
    </div>

    <!-- RIGHT ICON PANEL -->
    <div class="icon-panel">
      <img src="images/icons/profile.png" class="icon" alt="Profile">
      <img src="images/icons/bag.png" class="icon" alt="Backpack">
      <img src="images/icons/home.png" class="icon" alt="Home">
    </div>

    <!-- LEVEL -->
    <div class="level">level 51</div>

    <!-- INPUT NAME -->
    <div class="search-box">
      <img src="images/icons/box-input.png" alt="Input Box" class="input-box-image">
      <input type="text" placeholder="Input pokemon name" class="search-input">
    </div>

    <!-- Caption -->
    <p class="caption">Are you sure you want name it that?</p>

    <!-- EGG -->
    <div class="egg">
      <img src="images/pokemon/egg.png" alt="egg">
    </div>

    <!-- BUTTON NAMING -->
    <div class="button-panel">
      <button class="confirm">
        <img src="images/icons/confirm-hj.png" alt="confirm">
      </button>
      <button class="cancel">
        <img src="images/icons/cancel.png" alt="cancel">
      </button>
    </div>

  </div>
</div>
</body>
</html>

================
File: package.json
================
{
  "name": "pokemondaycare",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "vite": "^6.3.5"
  },
  "dependencies": {
    "phaser": "^3.90.0"
  }
}

================
File: README.md
================
# PokemonDayCare

================
File: src/counter.js
================
export function setupCounter(element) {
  let counter = 0
  const setCounter = (count) => {
    counter = count
    element.innerHTML = `count is ${counter}`
  }
  element.addEventListener('click', () => setCounter(counter + 1))
  setCounter(0)
}

================
File: src/game/Pet.js
================
import * as PokeAPI from './PokeAPIService.js';

// Gunakan EventEmitter bawaan Phaser untuk komunikasi antar kelas
export default class Pet extends Phaser.Events.EventEmitter {
    constructor(scene, x, y, pokemonRegistryData) {
        super(); // Penting untuk mengaktifkan EventEmitter

        this.scene = scene;
        this.pokemonData = pokemonRegistryData.data;
        this.spriteUrls = pokemonRegistryData.sprites;
        this.name = pokemonRegistryData.nickname || this.pokemonData.name;
        this.isAsleep = false;
        
        // --- Properti Status Game ---
        this.stats = {
            hunger: 100,      // Kenyang
            boredom: 100,     // Senang
            tired: 100,   // Segar
            exp: 0,
            maxExp: 50,
            level: 1,
            inventory: {
                'Berries': { // Pastikan 'B'-nya besar
                    'cheri': 3,
                    'pecha': 2,
                    'oran': 5
                },
                'General': { 
                    'poke-ball': 10,
                    'potion': 5
                }
            }
        };

        // Buat DOM Element untuk menampilkan GIF
        const petHtml = `<div id="pet-sprite" style="
            width:96px;
            height:96px;
            background-image:url(${this.spriteUrls.animated});
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            image-rendering: pixelated;
            transform:scale(2);
        "></div>`;
        this.gameObject = scene.add.dom(x, y).createFromHTML(petHtml);

        // Timer untuk mengurangi status secara berkala
        this.decayTimer = scene.time.addEvent({
            delay: 8000, // Status berkurang setiap 8 detik
            callback: this.decreaseStats,
            callbackScope: this,
            loop: true
        });
    }

    feed(berryName) {
        if (this.isAsleep || !this.stats.inventory.Berries || !this.stats.inventory.Berries[berryName] || this.stats.inventory.Berries[berryName] <= 0) {
            console.warn(`Mencoba memberi makan dengan ${berryName}, tetapi tidak ada di inventaris atau pet sedang tidur.`);
            return;
        }
        console.log(`Feeding with ${berryName}. Current count: ${this.stats.inventory.Berries[berryName]}`);

        this.stats.inventory.Berries[berryName]--;

        let hungerGain = 20; 
        if (berryName === 'oran') hungerGain = 30;
        if (berryName === 'pecha') this.stats.boredom = Math.min(100, this.stats.boredom + 10);
        this.stats.hunger = Math.min(100, this.stats.hunger + hungerGain);
        
        this.emit('onStatChange', this.stats);

        if (this.stats.inventory.Berries[berryName] <= 0) {
            delete this.stats.inventory.Berries[berryName];
        }

        this.emit('onInventoryChange', this.stats.inventory); 
    }

    play(type) {
        if (this.isAsleep) return;
        switch (type) {
            case 'groom':
                this.stats.boredom = Math.min(100, this.stats.boredom + 10);
                break;
            case 'pet':
                this.stats.boredom = Math.min(100, this.stats.boredom + 5);
                break;
            case 'toys':
                this.stats.boredom = Math.min(100, this.stats.boredom + 15);
                this.stats.hunger = Math.max(0, this.stats.hunger - 5);
                break;
        }
        this.emit('onStatChange', this.stats);
    }

    async train(type) {
        if (this.isAsleep) return;
        switch (type) {
            case 'battle':
                this.stats.hunger -= 8; this.stats.boredom -= 4; this.stats.tired -= 5;
                this.addExp(50);
                break;
            case 'hunting':
                this.stats.hunger -= 10; this.stats.boredom -= 5; this.stats.tired -= 10;
                this.addExp(25);
                break;
            case 'strolling':
                this.stats.hunger -= 4; this.stats.boredom += 8; this.stats.tired -= 5;
                
                // Ambil 3 berry acak
                console.log("Strolling for berries...");
                if (!this.stats.inventory.Berries) {
                    this.stats.inventory.Berries = {};
                }

                for (let i = 0; i < 3; i++) {
                    const randomBerryId = Phaser.Math.Between(1, 64);
                    const berryData = await PokeAPI.getBerry(randomBerryId);
                    if (berryData) {
                        const berryName = berryData.name;
                        this.stats.inventory.Berries[berryName] = (this.stats.inventory.Berries[berryName] || 0) + 1;
                        console.log(`Found a ${berryName} berry!`);
                    }
                }
                this.emit('onInventoryChange', this.stats.inventory);
                this.addExp(15);
                break;
        }
        this.stats.hunger = Math.max(0, this.stats.hunger);
        this.stats.boredom = Math.max(0, this.stats.boredom);
        this.stats.tired = Math.max(0, this.stats.tired);
        this.emit('onStatChange', this.stats);
    }

    sleep() {
        if (this.isAsleep) return;
        this.isAsleep = true;
        const petSpriteDiv = this.gameObject.node.querySelector('#pet-sprite');
        petSpriteDiv.style.backgroundImage = `url(${this.spriteUrls.default})`;
        petSpriteDiv.style.opacity = '0.7';
        this.emit('onStateChange', { asleep: true });
    }

    wakeUp() {
        if (!this.isAsleep) return;
        this.isAsleep = false;
        this.stats.tired = Math.min(100, this.stats.tired + 60); // Pulih banyak saat bangun
        const petSpriteDiv = this.gameObject.node.querySelector('#pet-sprite');
        petSpriteDiv.style.backgroundImage = `url(${this.spriteUrls.animated})`;
        petSpriteDiv.style.opacity = '1';
        this.emit('onStatChange', this.stats);
        this.emit('onStateChange', { asleep: false });
    }

    updateSprite() {
        if (this.gameObject && this.gameObject.node) {
            const petSpriteDiv = this.gameObject.node.querySelector('#pet-sprite');
            // Update the background image to the new animated sprite
            petSpriteDiv.style.backgroundImage = `url(${this.spriteUrls.animated})`;
        }
    }

    // --- Logika Internal Pet ---
    decreaseStats() {
        if (this.isAsleep) {
            this.stats.tired = Math.min(100, this.stats.tired + 10);
        } else {
            this.stats.hunger = Math.max(0, this.stats.hunger - 4);
            this.stats.boredom = Math.max(0, this.stats.boredom - 3);
            this.stats.tired = Math.max(0, this.stats.tired - 2);
        }
        this.emit('onStatChange', this.stats);
        this.checkFailureConditions();
    }

    addExp(amount) {
        this.stats.exp += amount;
        if (this.stats.exp >= this.stats.maxExp) {
            this.levelUp();
        }
    }

    levelUp() {
        this.stats.level++;
        this.stats.exp -= this.stats.maxExp;
        //this.stats.maxExp += 25; // Butuh lebih banyak exp untuk level selanjutnya
        this.emit('onLevelUp', this.stats.level);

        // Cek evolusi (contoh: evolusi di level 15 & 30)
        if (this.stats.level === 15 || this.stats.level === 30) {
            this.evolve();
        }
    }

    async evolve() {
        const evolutionChain = await PokeAPI.getEvolutionChain(this.pokemonData);
        if (!evolutionChain) return;

        let currentStage = evolutionChain.chain;
        let nextEvolutionName = null;

        // Cari tahap evolusi berikutnya
        while (currentStage && currentStage.species.name !== this.name) {
            currentStage = currentStage.evolves_to[0];
        }

        // Check if there is a next evolution stage
        if (currentStage && currentStage.evolves_to.length > 0) {
            nextEvolutionName = currentStage.evolves_to[0].species.name;
        }

        if (nextEvolutionName) {
            const newPokemonData = await PokeAPI.getPokemonData(nextEvolutionName);
            if (newPokemonData) {
                // Perbarui data internal pet
                this.pokemonData = newPokemonData;
                this.spriteUrls = PokeAPI.extractPokemonSprites(newPokemonData);
                this.name = newPokemonData.name;
                this.updateSprite(); 

                // Pancarkan event evolusi
                this.emit('onEvolve', { 
                    newName: this.name, 
                    popupSpriteUrl: this.spriteUrls.default 
                });

                // Find the new Pokémon in the chain again to check *its* next stage
                let newCurrentStage = evolutionChain.chain;
                while(newCurrentStage && newCurrentStage.species.name !== this.name) {
                    newCurrentStage = newCurrentStage.evolves_to[0];
                }
                
                // If the new stage has no more evolutions, it's the final form
                if (newCurrentStage && newCurrentStage.evolves_to.length === 0) {
                    this.emit('onFinalEvolution', { name: this.name });
                }
            }
        }
    }

    checkFailureConditions() {
        if (this.stats.hunger < 20) {
            this.emit('onFaint', 'Your Pokémon fainted from hunger!');
            this.decayTimer.destroy();
        } else if (this.stats.boredom < 20) {
            this.emit('onRunAway', 'Your Pokémon ran away from boredom!');
            this.decayTimer.destroy();
        } else if (this.stats.tired < 25) {
            this.emit('onFaint', 'Your Pokémon fainted from exhaustion!');
            this.decayTimer.destroy();
        }
    }
    
    setPosition(x, y) {
        this.gameObject.setPosition(x, y);
    }
    
    show() {
        if (this.gameObject) {
            this.gameObject.setVisible(true);
        }
    }

    hide() {
        if (this.gameObject) {
            this.gameObject.setVisible(false);
        }
    }

    destroy() {
        if (this.decayTimer) this.decayTimer.destroy();
        if (this.gameObject) this.gameObject.destroy();
        this.removeAllListeners();
    }
}

================
File: src/game/PokeAPIService.js
================
const BASE_URL = 'https://pokeapi.co/api/v2';

// Fungsi untuk mengambil data dasar Pokemon
export async function getPokemonData(nameOrId) {
    try {
        const response = await fetch(`${BASE_URL}/pokemon/${nameOrId.toLowerCase()}`);
        if (!response.ok) {
            throw new Error('Pokemon not found!');
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Error fetching Pokémon data:", error);
        return null;
    }
}

//Fungsi mengambil data lengkap untuk satu Berry berdasarkan nama atau ID.
export async function getBerry(nameOrId) {
    const processedInput = nameOrId.toString().toLowerCase();
    try {
        const response = await fetch(`${BASE_URL}/berry/${processedInput}`);
        if (!response.ok) {
            throw new Error(`Berry "${nameOrId}" tidak ditemukan.`);
        }
        return await response.json();
    } catch (error) {
        console.error(`Gagal mengambil data Berry: ${error.message}`);
        return null;
    }
}

//Helper function untuk mengekstrak URL sprite yang paling berguna dari data Pokémon.
export function extractPokemonSprites(pokemonData) {
    if (!pokemonData || !pokemonData.sprites) {
        console.warn("Data Pokémon tidak valid untuk mengekstrak sprite.");
        return null;
    }

    // Cari sprite animasi dari data 'versions'
    const animatedSprite = pokemonData.sprites.versions['generation-v']['black-white'].animated.front_default;

    return {
        // Sprite pixel-art klasik (statis)
        default: pokemonData.sprites.front_default,
        // Sprite modern dengan resolusi tinggi (statis)
        official: pokemonData.sprites.other['official-artwork'].front_default,
        // Sprite gaya lain (statis)
        dreamWorld: pokemonData.sprites.other.dream_world.front_default,
        // Sprite animasi (GIF)
        animated: animatedSprite 
    };
}

//Mengambil URL sprite untuk sebuah Berry.
export async function getBerrySpriteUrl(berryData) {
    if (!berryData || !berryData.item || !berryData.item.url) {
        console.warn("Data Berry tidak valid untuk mengambil sprite.");
        return null;
    }

    try {
        const response = await fetch(berryData.item.url);
        if (!response.ok) {
            throw new Error(`Gagal mengambil data item untuk Berry.`);
        }
        const itemData = await response.json();
        
        // Pastikan sprite ada di dalam data item
        if (itemData.sprites && itemData.sprites.default) {
            return itemData.sprites.default;
        } else {
            throw new Error(`Sprite tidak ditemukan untuk item ini.`);
        }
    } catch (error) {
        console.error(`Gagal mengambil sprite Berry: ${error.message}`);
        return null;
    }
}

// Fungsi untuk mengambil rantai evolusi (ini memerlukan 2 panggilan)
export async function getEvolutionChain(pokemonData) {
    try {
        // 1. Ambil URL spesies dari data pokemon
        const speciesResponse = await fetch(pokemonData.species.url);
        if (!speciesResponse.ok) throw new Error('Could not fetch species data.');
        const speciesData = await speciesResponse.json();

        // 2. Ambil URL rantai evolusi dari data spesies
        const evolutionChainResponse = await fetch(speciesData.evolution_chain.url);
        if (!evolutionChainResponse.ok) throw new Error('Could not fetch evolution chain.');
        const evolutionChainData = await evolutionChainResponse.json();
        
        return evolutionChainData;
    } catch (error) {
        console.error("Error fetching evolution chain:", error);
        return null;
    }
}

================
File: src/main.js
================
import './style.css'

import Phaser from 'phaser';
import HomescreenScene from './scenes/HomescreenScene.js';
import ChoosePokemonScene from './scenes/ChoosePokemonScene.js';
import SearchPokemonScene from './scenes/SearchPokemonScene.js';
import NamingScene from './scenes/NamingScene.js';
import MainGameScene from './scenes/MainGameScene.js';

const config = {
    type: Phaser.AUTO, // Otomatis pilih WebGL atau Canvas
    parent: 'game-container',
    // Gunakan Scale Manager untuk membuat game responsif
    scale: {
        mode: Phaser.Scale.FIT, 
        autoCenter: Phaser.Scale.CENTER_BOTH, 
        width: 800,  
        height: 600,
    },
    
    dom: {
        createContainer: true
    },

    scene: [
        // Daftarkan semua scene Anda di sini. Urutan pertama akan dijalankan lebih dulu.
        HomescreenScene,
        ChoosePokemonScene,
        SearchPokemonScene,
        NamingScene,
        MainGameScene,
    ]
};

const game = new Phaser.Game(config);

================
File: src/profile.css
================
/* RESET DASAR & UMUM */Add commentMore actions
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body, html {
  height: 100%;
  font-family: 'Pixelify Sans', Arial, sans-serif;
} */

/* STATUS PANEL (popup & babysit) */Add commentMore actions
#page2 .container {
  background-image: url("../public/assets/images/bgpokemon.png");
  background-size: contain;
  background-position: center;
}

#page2 .status-panel {
  position: absolute;
  top: 30px;
  left: 60px;
  color: #000000;
  font-size: 18px;
}

#page2 .status-bar {
  margin-bottom: 0;
  font-family: Arial, sans-serif;
  font-weight: bold;
  color: #000000;
}

#page2 .label {
  margin-bottom: 0px;
}

#page2 .bar {
  padding: 4px;
}

#page2 .bar img {
  width: 120px;
  height: 20px;
  display: block;
  image-rendering: pixelated;
}

/* ICON PANEL */
#page2 .icon-panel {
  position: absolute;
  top: 30px;
  right: 60px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}
#page2 .icon {
  width: 50px;
  cursor: pointer;
}

#page2 .icon:hover {
  transform: scale(1.05);
}

/* LEVEL */
#page2 .level {
  text-align: center;
  margin-top: -65px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -250px);
  font-size: 20px;
  font-family: 'Aldrich';
  background: #9F51FE;
  color: #FFFFFF;
  padding: 3px 10px;
  border: 3px solid #FFFFFF;
  border-radius: 10px;
  position: absolute;
}

/* BUTTON PANEL */
#page2 .button-panel {
  display: flex;
  justify-content: center;
  gap: 130px;
  position: absolute;
  bottom: 30px;
}
#page2 .button-panel button {
  background: none;
  padding: 0;
  margin: 0;
  border: none;
  cursor: pointer;
}

#page2 .button-panel button img {
  width: 120px;  
  height: auto; 
}

#page2 .button-panel button:hover img {
    transform: scale(1.05);
}


/* PROFILE */
* {
margin: 0;
padding: 0;
box-sizing: border-box;
}

body {
font-family: 'Pixelify.sans';
margin-top: 120px;
display: flex;
align-items: center;
justify-content: center;
padding: 20px;
}

.pokemon-card {
background: #f8f9fa;
border-radius: 20px;
width: 900px;
padding: 25px;
box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
position: relative;
}

.header {
background: #E8A95E;
color: white;
width: 350px;
padding: 15px 15px;
border-radius: 30px;
font-family: 'Pixelify.sans';
font-size: 20px;
font-weight: 600;
text-align: center;
}

.close-btn {
  position: absolute;
  right: 0;
  top: 0;
  background: transparent;
  border: none;
  cursor: pointer;
  width: 60px;
  height: 60px;
  padding: 0;
  z-index: 10;
}

.close-btn img {
  width: 100%;
  height: auto;
  display: block;
}

.close-btn:hover img{
    transform: scale(1.05);
}

.main-content {
display: grid;
grid-template-columns: 1fr 1fr;
gap: 20px;
align-items: start;
}

.pokemon-image {
text-align: center;
margin-top: 20px;
}

.pokemon {
margin-left: 20px;
filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

.drop-shadow {
  position: relative;
  margin-top: -70px;
}

.evolution-chain {
  position: absolute;
  bottom: 30px; 
  gap: 30px;
  left: 0;
  width: 100%;
  display: flex;
  justify-content: space-evenly;
  pointer-events: none;
}

.evolution-sprite {
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  align-items: center;
  pointer-events: auto;
}

.evolution-sprite img {
  width: 50px;
  height: 50px;
  object-fit: contain;
  margin-left: -900px;
  margin-top: 50px;
}

.evolution-names {
  position: relative;
  display: flex;
  gap: 100px;
  justify-content: left;
  margin-top: 100px;
  margin-left: 30px;
  font-size: 16px;
  color: #000000;
}

.evolution-names span {
  width: 40px;
  text-align: center;
}

.info-section {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.weaknesses {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.weaknesses h3 {
  font-size: 20px;
  font-weight: 600;
  color: #000000;
  margin-bottom: 5px;
}

.weakness-buttons {
  display: flex;
  gap: 10px;
}

.weakness-btn {
  padding: 6px 12px;
  border: none;
  border-radius: 15px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  color: white;
}

.weakness-btn.water {
  background: #1DA8D4;
}

.weakness-btn.ground {
  background: #E9D227;
}

.weakness-btn.rock {
  background: #9A8D26;
}

.weakness-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.weakness-btn:active {
  transform: translateY(0);
}

.story {
  margin: 10px 0;
}

.story h3 {
  font-size: 20px;
  font-weight: 600;
  color: #000000;
  margin-bottom: 8px;
}

.story p {
  font-size: 16px;
  color: #000000;
  line-height: 1.4;
}

.version {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.version h3 {
  font-size: 20px;
  font-weight: 600;
  color: #000000;
}

.version-buttons {
  display: flex;
  gap: 10px;
}

.version-btn {
  padding: 6px 16px;
  border: 2px solid #ddd;
  border-radius: 15px;
  background: white;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  color: #000000;
}

.version-btn:hover {
  border-color: #EF8E18;
  color: #EF8E18;
  transform: translateY(-1px);
}

.version-btn.active {
  background: #EF8E18;
  border-color: #EF8E18;
  color: white;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
  margin-top: 15px;
}

.stat-box {
  background: white;
  border: 2px solid #FFC5BA;
  border-radius: 8px;
  padding: 8px;
  text-align: center;
  width: 100px;
  height: 80px;
}

.stat-label {
  font-size: 14px;
  font-weight: 600;
  color: #000000;
  margin-bottom: 2px;
}

.stat-value {
  font-size: 14px;
  font-weight: 600;
  color: #000000;
}

.gender-icons {
  display: flex;
  gap: 4px;
  align-items: center;
}

.stat-value.gender-icons {
  display: flex;
  justify-content: center;
  gap: 5px;
  align-items: center;
}

.male {
  color: #42A5F5;
}

.female {
  color: #EC407A;
}

.male, .female {
  font-size: 18px;
  font-weight: bold;
}

================
File: src/scenes/ChoosePokemonScene.js
================
import * as PokeAPI from '../game/PokeAPIService.js';

export default class ChoosePokemonScene extends Phaser.Scene {
    constructor() {
        super('ChoosePokemonScene');

        // Daftar Pokémon yang akan ditampilkan di carousel
        this.starterPokemonNames = ['pikachu', 'squirtle', 'bulbasaur', 'charmander', 'eevee', 'jigglypuff'];
        
        // Properti untuk mengelola state carousel
        this.carouselContainer = null;
        this.carouselBox = null;
        this.currentIndex = 0;
        this.spacing = 180; // Jarak antar pokemon, kita akan sesuaikan
    }

    preload() {
        // Path 'assets/...' karena kita menaruhnya di folder public
        this.load.image('choose-bg', 'assets/images/background.jpg'); 
        this.load.image('arrow-left', 'assets/images/icons/nav-left.png');
        this.load.image('arrow-right', 'assets/images/icons/nav-right.png');
        this.load.image('searchButton', 'assets/images/icons/search.png');
        this.load.image('title', 'assets/images/title.png');
    }

    create() {
        // --- 1. Setup UI Dasar dan Latar Belakang ---
        this.background = this.add.image(0, 0, 'choose-bg').setOrigin(0.5, 0.5);
        this.title = this.add.image(0, 0, 'title').setOrigin(0.5, 0.5);
        this.carouselBox = this.add.graphics();
        
        // --- 4. Container untuk Pokémon ---
        this.carouselContainer = this.add.container(0, 0);

        // --- 2. Tombol Navigasi Carousel ---
        this.arrowLeft = this.add.image(0, 0, 'arrow-left').setInteractive({ cursor: 'pointer' });
        this.arrowRight = this.add.image(0, 0, 'arrow-right').setInteractive({ cursor: 'pointer' });
        this.searchButton = this.add.image(0, 0, 'searchButton').setInteractive({ cursor: 'pointer' });

        this.arrowLeft.on('pointerdown', () => this.scrollCarousel(-1));
        this.arrowRight.on('pointerdown', () => this.scrollCarousel(1));

        // --- 3. Tombol Search ---
        this.searchButton.on('pointerdown', () => {
             // Ganti dengan scene pencarian Anda nanti, misal: 'SearchScene'
            console.log("Navigasi ke Scene Pencarian...");
            this.scene.start('SearchPokemonScene'); 
        });

        // Atur posisi semua elemen UI
        this.repositionElements();
        this.scale.on('resize', this.repositionElements, this);

        // --- 5. Memuat data dan sprite Pokémon ---
        this.loadStarterPokemon();
    }

    async loadStarterPokemon() {
        const loadingText = this.add.text(this.scale.width / 2, this.scale.height / 2, 'Loading Pokémon...', {
            fontFamily: 'Pixelify Sans', fontSize: '32px', color: '#FFF'
        }).setOrigin(0.5);

        // Muat semua sprite Pokémon secara dinamis
        for (const name of this.starterPokemonNames) {
            const pokemonData = await PokeAPI.getPokemonData(name);
            if (pokemonData) {
                const sprites = PokeAPI.extractPokemonSprites(pokemonData);
                // Kita gunakan sprite 'official' untuk tampilan yang lebih modern
                this.load.image(`pokemon_${name}`, sprites.official);
            }
        }
        
        // Jalankan loader dan tunggu selesai
        this.load.start();
        this.load.once('complete', () => {
            loadingText.destroy();
            this.createPokemonInCarousel();
        });
    }

    createPokemonInCarousel() {
        // Ambil lebar box yang sudah digambar untuk referensi
        const boxWidth = this.scale.width * 0.7;
        
        // Tentukan jarak antar pokemon agar pas di dalam box
        // Kita tampilkan 3 pokemon, jadi ada 4 'slot' (kiri, tengah1, tengah2, kanan)
        this.spacing = boxWidth / 3; 

        // Bersihkan container jika ada item lama (untuk jaga-jaga)
        this.carouselContainer.removeAll(true);
        
        this.starterPokemonNames.forEach((name, index) => {
            // Posisikan setiap item bersebelahan dalam satu baris panjang
            const xPos = index * this.spacing;
            const itemContainer = this.add.container(xPos, 0);

            const pokemonImage = this.add.image(0, -20, `pokemon_${name}`).setScale(0.35);

            const pokemonText = this.add.text(0, 60, name.charAt(0).toUpperCase() + name.slice(1), {
                fontFamily: 'Pixelify Sans', fontSize: '20px', color: '#000000'
            }).setOrigin(0.5);

            itemContainer.add([pokemonImage, pokemonText]);
            itemContainer.setSize(pokemonImage.width * 0.6, 150).setInteractive({ cursor: 'pointer' });

            itemContainer.on('pointerdown', () => this.onPokemonConfirm(name));
            itemContainer.on('pointerover', () => itemContainer.setScale(1.1));
            itemContainer.on('pointerout', () => itemContainer.setScale(1.0));

            this.carouselContainer.add(itemContainer);
        });

        this.updateCarouselVisibility();
    }
    
    scrollCarousel(direction) {
        this.currentIndex += direction;
        this.updateCarouselVisibility();
    }

    updateCarouselVisibility() {
        const itemsVisible = 3; // Berapa pokemon yang ingin ditampilkan sekaligus

        // Batasi pergerakan agar tidak keluar dari daftar
        if (this.currentIndex < 0) {
            this.currentIndex = 0;
        } else if (this.currentIndex > this.starterPokemonNames.length - itemsVisible) {
            this.currentIndex = this.starterPokemonNames.length - itemsVisible;
        }

        // Hitung offset X berdasarkan pokemon yang sedang aktif
        const targetOffset = this.currentIndex * this.spacing;

        // Posisi X awal dari seluruh barisan pokemon agar terpusat
        const startX = this.scale.width / 2 - this.spacing;

        // Posisi akhir container adalah posisi awal dikurangi offset scroll
        const finalX = startX - targetOffset;

        // Animasikan pergerakan container. 
        // Logikanya: (posisi tengah container) + (posisi awal barisan pokemon) - (offset scroll)
        // Karena posisi awal (startX) sudah dihitung, kita hanya perlu menggeser berdasarkan offset
        this.tweens.add({
            targets: this.carouselContainer,
            x: finalX,
            duration: 300,
            ease: 'Power2'
        });

        // Tampilkan/sembunyikan tombol panah
        this.arrowLeft.setVisible(this.currentIndex > 0);
        this.arrowRight.setVisible(this.currentIndex < this.starterPokemonNames.length - itemsVisible);
    }
    
    async onPokemonConfirm(pokemonName) {
        const loadingText = this.add.text(this.scale.width / 2, this.scale.height / 2, `Memilih ${pokemonName}...`, { 
            fontFamily: 'Pixelify Sans', fontSize: '32px', color: '#FFF' 
        }).setOrigin(0.5);

        const pokemonData = await PokeAPI.getPokemonData(pokemonName);

        if (pokemonData) {
            const sprites = PokeAPI.extractPokemonSprites(pokemonData);
            
            this.registry.set('playerPokemon', { data: pokemonData, sprites: sprites });
            
            this.time.delayedCall(500, () => { this.scene.start('NamingScene'); });

        } else {
            loadingText.setText(`Gagal memuat data ${pokemonName}!`);
            this.time.delayedCall(2000, () => loadingText.destroy());
        }
    }

    repositionElements() {
        const { width, height } = this.scale;

        // Latar Belakang
        this.background.setPosition(width / 2, height / 2);
        const scaleBg = Math.max(width / this.background.width, height / this.background.height);
        this.background.setScale(scaleBg);

        // Judul
        this.title.setPosition(width / 2, height * 0.15);
        this.title.setScale(width / 1400);

        // Tentukan dimensi dan properti carousel box
        const boxWidth = width * 0.7;  // Lebar 70% dari layar
        const boxHeight = height * 0.35; // Tinggi 35% dari layar
        const boxX = (width - boxWidth) / 2; // Posisi X agar di tengah
        const boxY = (height - boxHeight) / 2; // Posisi Y agar di tengah
        const cornerRadius = 40; // Radius sudut melengkung

        // Bersihkan gambar sebelumnya sebelum menggambar ulang
        this.carouselBox.clear();
        
        // Atur warna dan gaya
        this.carouselBox.fillStyle(0xFFFDE0, 0.9); // Warna kuning pucat, opacity 90%
        this.carouselBox.lineStyle(5, 0xE0CBA8, 1); // Border/stroke

        // Gambar kotak persegi panjang dengan sudut melengkung
        this.carouselBox.fillRoundedRect(boxX, boxY, boxWidth, boxHeight, cornerRadius);
        this.carouselBox.strokeRoundedRect(boxX, boxY, boxWidth, boxHeight, cornerRadius);

        // Posisikan Carousel Container di tengah box yang baru digambar
        if (this.carouselContainer) {
            this.carouselContainer.setPosition(width / 2, height / 2);

            // Buat 'mask' agar Pokémon hanya terlihat di dalam box
            // Masker juga harus dibuat ulang karena ukuran box bisa berubah
            const maskShape = this.make.graphics();
            maskShape.fillStyle(0xffffff);
            // Gunakan dimensi yang sama dengan box yang kita gambar
            maskShape.fillRect(boxX, boxY, boxWidth, boxHeight);
            this.carouselContainer.mask = new Phaser.Display.Masks.GeometryMask(this, maskShape);
        }

        // Posisikan Tombol Panah relatif terhadap box yang baru digambar
        this.arrowLeft.setPosition(boxX - 40, height / 2);
        this.arrowRight.setPosition(boxX + boxWidth + 40, height / 2);
        
        // Tombol Search
        this.searchButton.setPosition(width / 2, height * 0.85);
    }
}

================
File: src/scenes/HomescreenScene.js
================
export default class HomescreenScene extends Phaser.Scene {
    constructor() {
        super('Homescreen');
    }

    // Fungsi preload() untuk memuat aset sebelum scene dimulai
    preload() {
        // Path 'assets/...' karena kita menaruhnya di folder public
        this.load.image('homescreen-bg', 'assets/images/background.jpg'); 
        this.load.image('startButton', 'assets/images/icons/Hover.png');
        this.load.image('title', 'assets/images/title.png');
    }

    create() {
        // --- 1. Buat Semua Elemen Game ---
        // Latar Belakang
        this.background = this.add.image(0, 0, 'homescreen-bg').setOrigin(0.5, 0.5);
        // Judul Game
        this.title = this.add.image(0, 0, 'title').setOrigin(0.5, 0.5);

        // Tombol Start (dibuat dari gambar aset)
        this.startButton = this.add.image(0, 0, 'startButton')
            .setOrigin(0.5, 0.5)
            .setInteractive({ cursor: 'pointer' });

        // Teks Petunjuk di Bawah Tombol
        this.pressStartText = this.add.text(0, 0, 'Press Start to Play', {
            fontFamily: 'Pixelify Sans',
            fontSize: '18px',
            color: '#000000',
            stroke: '#ffffff',
            strokeThickness: 4
        }).setOrigin(0.5, 0.5);


        // --- 2. Atur Event Handling ---

        // Event saat tombol start ditekan
        this.startButton.on('pointerdown', () => {
            this.tweens.add({
                targets: this.startButton,
                scale: 0.95,
                ease: 'Power1',
                duration: 100,
                yoyo: true,
                onComplete: () => {
                    this.scene.start('ChoosePokemonScene');
                }
            });
        });

        // Event untuk hover effect
        this.startButton.on('pointerover', () => {
            this.tweens.add({ targets: this.startButton, scale: 1.05, duration: 100 });
        });
        this.startButton.on('pointerout', () => {
            this.tweens.add({ targets: this.startButton, scale: 1, duration: 100 });
        });


        // --- 3. Posisikan Elemen dan Siapkan untuk Resize ---

        this.repositionElements();
        this.scale.on('resize', this.repositionElements, this);
    }

    repositionElements() {
        const { width, height } = this.scale;

        // Posisikan Latar Belakang
        this.background.setPosition(width / 2, height / 2);
        const scaleXBg = width / this.background.width;
        const scaleYBg = height / this.background.height;
        this.background.setScale(Math.max(scaleXBg, scaleYBg));

        // Posisikan Judul
        this.title.setPosition(width / 2, height * 0.28);
        this.title.setScale(width / 1200);

        // Posisikan Tombol Start
        this.startButton.setPosition(width / 2, height * 0.75);

        // Posisikan Teks Petunjuk
        // Kita perlu menghitung posisi di bawah tombol setelah diskalakan
        const buttonBottom = this.startButton.y + (this.startButton.displayHeight / 2);
        this.pressStartText.setPosition(width / 2, buttonBottom + 20); // Beri jarak 20px
    }
}

================
File: src/scenes/MainGameScene.js
================
import Pet from '../game/Pet.js';
import FeedPopup from '../ui/FeedPopup.js';
import InventoryPopup from '../ui/InventoryPopup.js';
import GameOverPopup from '../ui/GameOverPopup.js';
import EvolutionPopup from '../ui/EvolutionPopup.js';
import ProfilePopup from '../ui/ProfilePopup.js';
import WonPopup from '../ui/WonPopup.js';
import * as PokeAPI from '../game/PokeAPIService.js';

export default class MainGameScene extends Phaser.Scene {
    constructor() {
        super('MainGameScene');
        this.playerPet = null;
        this.ui = {};
        this.ui.profilePopup = null;
    }

    preload() {
        this.load.image('game-bg', 'assets/images/bgpokemon.png');
        this.load.image('feedButton', 'assets/images/icons/btn-feed.png');
        this.load.image('sleepButton', 'assets/images/icons/btn-sleep.png');
        this.load.image('trainingButton', 'assets/images/icons/btn-training.png');
        this.load.image('playButton', 'assets/images/icons/btn-play.png');
        this.load.image('fullStatusBar', 'assets/images/icons/full-bar.png');
        this.load.image('emptyStatusBar', 'assets/images/icons/empty-bar.png');
        this.load.image('profileIcon', 'assets/images/icons/profile.png');
        this.load.image('bagIcon', 'assets/images/icons/bag.png');
        this.load.image('homeIcon', 'assets/images/icons/home.png');
        this.load.image('popup-box', 'assets/images/icons/option.png');
        this.load.image('feed-box', 'assets/images/icons/box-feed.png');
        this.load.image('closeButton', 'assets/images/icons/close-red.png');
        this.load.image('inventory', 'assets/images/icons/inventory.png');
        this.load.image('gameoverTitle', 'assets/images/icons/gameover.png');
        this.load.image('upgradeTitle', 'assets/images/icons/upgrade.png');
        this.load.image('restartButton', 'assets/images/icons/restart.png');
    }

    create() {
        this.background = this.add.image(this.scale.width / 2, this.scale.height / 2, 'game-bg');
        const pokemonRegistryData = this.registry.get('playerPokemon');

        if (!pokemonRegistryData) {
            this.add.text(this.scale.width/2, this.scale.height/2, 'No Pokémon data found.').setOrigin(0.5);
            return;
        }

        // --- Inisialisasi Pet dan UI ---
        this.playerPet = new Pet(this, 0, 0, pokemonRegistryData);
        this.createUI();
        this.repositionUI();
        this.updateUI(this.playerPet.stats);

        // --- Event Listeners ---
        this.scale.on('resize', this.repositionUI, this);
        this.playerPet.on('onStatChange', this.updateUI, this);
        this.playerPet.on('onLevelUp', (level) => this.ui.levelText.setText(`Level ${level}`), this);
        this.playerPet.on('onFaint', (reason) => this.showGameOverPopup('Your Pokemon fainted :(', reason), this);
        this.playerPet.on('onRunAway', (reason) => this.showGameOverPopup('Your Pokemon Ran Away!', reason), this);
        this.playerPet.on('onEvolve', this.showEvolutionPopup, this);
        this.playerPet.on('onFinalEvolution', this.showWonPopup, this);
        this.playerPet.on('onInventoryChange', () => {
            if (this.ui.inventoryPopup && this.ui.inventoryPopup.active) {
                this.ui.inventoryPopup.updateItemList();
            }
        }, this);
        this.events.on('shutdown', this.shutdown, this);
    }

    // --- Fungsi Pembuatan UI ---
    createUI() {
        // Status Bars
        this.ui.statusBars = {};
        const statusKeys = ['TIRED', 'HUNGER', 'BOREDOM'];
        statusKeys.forEach((status, index) => { // Tambahkan 'index' di sini
            const label = this.add.text(0, 0, `${status}: 100`, { 
                fontSize: '16px', 
                fontFamily: 'Arial',
                color: '#000000',
                fontStyle: 'bold'
            }).setOrigin(0, 0.5);

            const emptyBar = this.add.image(0, 20, 'emptyStatusBar').setOrigin(0, 0.5).setScale(0.8);
            const fullBar = this.add.image(0, 20, 'fullStatusBar').setOrigin(0, 0.5).setScale(0.8);
            const container = this.add.container(0, 0, [label, emptyBar, fullBar]);
            this.ui.statusBars[status.toLowerCase()] = { 
                label, 
                bar: fullBar, 
                container 
            };

            // --- TAMBAHAN: Simpan referensi ke container status bar terakhir ---
            if (index === statusKeys.length - 1) {
                this.ui.lastStatusBarContainer = container;
            }
        });

        // Icon Panel Kanan
        this.ui.iconPanel = {
            profile: this.add.image(0, 0, 'profileIcon').setInteractive({ cursor: 'pointer' }).setScale(0.5)
                .on('pointerdown', () => {
                    // Prevent opening multiple popups
                    if (this.ui.profilePopup) return;

                    this.playerPet.hide();

                    // Create the popup and pass a callback function for when it closes
                    this.ui.profilePopup = new ProfilePopup(this, this.playerPet, () => {
                        this.playerPet.show();
                        this.ui.profilePopup = null; // Clear the reference
                    });
                }),
            bag: this.add.image(0, 0, 'bagIcon').setInteractive({ cursor: 'pointer' }).setScale(0.5)
                .on('pointerdown', () => {
                    if (this.ui.inventoryPopup && this.ui.inventoryPopup.active) {
                        this.children.bringToTop(this.ui.inventoryPopup);
                        return;
                    }
                    this.playerPet.hide();

                    // 2. Create the inventory popup instance
                    this.ui.inventoryPopup = new InventoryPopup(this, this.scale.width / 2, this.scale.height / 2, this.playerPet);
                    
                    // 3. Listen for when the popup is destroyed
                    this.ui.inventoryPopup.on('destroy', () => {
                        // When it's destroyed, show the pet again
                        this.playerPet.show();
                        // Clear the reference so we know the popup is gone
                        this.ui.inventoryPopup = null;
                    });
                }),
            home: this.add.image(0, 0, 'homeIcon').setInteractive({ cursor: 'pointer' }).setScale(0.07)
                .on('pointerdown', () => {
                        this.scene.start('Homescreen');
                    })
        };
        
        // Tombol Aksi Utama
        this.ui.actionButtons = {
            feed: this.add.image(0, 0, 'feedButton').setScale(0.5).setInteractive({ cursor: 'pointer' }).on('pointerdown', this.toggleFeedPopup, this),
            sleep: this.add.image(0, 0, 'sleepButton').setScale(0.5).setInteractive({ cursor: 'pointer' }).on('pointerdown', () => this.playerPet.isAsleep ? this.playerPet.wakeUp() : this.playerPet.sleep()),
            training: this.add.image(0, 0, 'trainingButton').setScale(0.5).setInteractive({ cursor: 'pointer' }).on('pointerdown', () => this.showSubMenu('train')),
            play: this.add.image(0, 0, 'playButton').setScale(0.5).setInteractive({ cursor: 'pointer' }).on('pointerdown', () => this.showSubMenu('play'))
        };

        // Level Text
        this.ui.levelText = this.add.text(0, 0, `level ${String(this.playerPet.stats.level).padStart(2, '0')}`, { 
            fontFamily: 'Pixelify Sans', 
            fontSize: '16px', 
            color: '#ffffff',
            backgroundColor: '#9F51FE',
            padding: { x: 8, y: 4 }
        }).setOrigin(0.5);

        // Tambahkan border putih di sekitar teks level secara manual
        this.ui.levelBorder = this.add.graphics();
    }
    
    toggleFeedPopup() {
        // If the popup exists and is active, close it.
        if (this.ui.feedPopup && this.ui.feedPopup.active) {
            this.ui.feedPopup.closePopup();
            this.ui.feedPopup = null; // Clear the reference
        } 
        // Otherwise, create and show it.
        else {
            this.showFeedPopup();
        }
    }

    async showFeedPopup() {
        // Jika popup sudah ada, jangan buat lagi.
        if (this.ui.feedPopup && this.ui.feedPopup.active) {
            return;
        }

        // Hancurkan yang lama jika ada (untuk keamanan)
        if (this.ui.feedPopup) this.ui.feedPopup.destroy();

        const loadingText = this.add.text(this.scale.width / 2, this.scale.height / 2, 'Loading Berries...', { fontSize: '24px' }).setOrigin(0.5);
        loadingText.setDepth(101);

        // Logika untuk memuat semua sprite berry yang ada di inventaris
        const inventory = this.playerPet.stats.inventory.Berries || {};
        const berryNames = Object.keys(inventory);

        if (berryNames.length === 0) {
            loadingText.destroy();
            this.createAndPositionPopup();
            return;
        }

        const filesToLoad = [];
        for (const name of berryNames) {
            if (!this.textures.exists(`berry_${name}`)) {
                const berryData = await PokeAPI.getBerry(name);
                if (berryData) {
                    const url = await PokeAPI.getBerrySpriteUrl(berryData);
                    if (url) {
                        filesToLoad.push({ key: `berry_${name}`, url: url });
                    }
                }
            }
        }
        
        const onAssetsReady = () => {
            loadingText.destroy();
            const anchorX = this.ui.lastStatusBarContainer.x;
            const anchorY = this.ui.lastStatusBarContainer.y;
            this.ui.feedPopup = new FeedPopup(this, anchorX, anchorY + 60, this.playerPet);
        };

        if (filesToLoad.length > 0) {
            filesToLoad.forEach(file => this.load.image(file.key, file.url));
            this.load.start();
            this.load.once('complete', onAssetsReady);
        } else {
            onAssetsReady();
        }
    }

    createAndPositionPopup() {
        const anchorX = this.ui.lastStatusBarContainer.x;
        const anchorY = this.ui.lastStatusBarContainer.y;

        // Buat instance baru dari kelas FeedPopup, dan posisikan
        this.ui.feedPopup = new FeedPopup(this, anchorX, anchorY + 60, this.playerPet);

        this.time.delayedCall(1, () => {
            if (this.ui.feedPopup && this.ui.feedPopup.active) {
                this.ui.feedPopup.populateGrid();
            }
        });
    }

    // --- Fungsi Update Tampilan ---
    updateUI(stats) {
        Object.keys(this.ui.statusBars).forEach(key => {
            const statName = key.charAt(0).toUpperCase() + key.slice(1);
            const { label, bar } = this.ui.statusBars[key];
            
            label.setText(`${statName.toUpperCase()}: ${stats[key]}`);
            
            const percentage = stats[key] / 100;
            bar.setCrop(0, 0, bar.texture.source[0].width * percentage, bar.height);
        });
    }
    
    showSubMenu(type) {
        if (this.ui.subMenu) this.ui.subMenu.destroy();
        
        const options = type === 'play' 
            ? [{ text: 'Groom', action: 'groom' }, { text: 'Pet', action: 'pet' }, { text: 'Toys', action: 'toys' }]
            : [{ text: 'Battle', action: 'battle' }, { text: 'Strolling', action: 'strolling' }, { text: 'Hunting', action: 'hunting' }];

        // Dapatkan posisi dari container status bar terakhir
        const anchorX = this.ui.lastStatusBarContainer.x;
        const anchorY = this.ui.lastStatusBarContainer.y;

        // Buat container menu
        const menuContainer = this.add.container(0, 0); // Posisi awal di 0,0
        this.ui.subMenu = menuContainer;

        // Gambar background menu
        const bg = this.add.image(0, 0, 'popup-box').setScale(0.7).setOrigin(0, 0); // Origin di kiri atas
        menuContainer.add(bg);

        // Tambahkan opsi-opsi menu
        options.forEach((opt, index) => {
            // Posisikan teks di dalam background
            const yPos = 30 + (index * 35); // Sesuaikan padding dan jarak
            const xPos = bg.displayWidth / 2; // Tepat di tengah background
            
            const optText = this.add.text(xPos, yPos, opt.text, { 
                fontFamily: 'Pixelify Sans', 
                fontSize: '22px', 
                color: '#333' 
            }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            
            optText.on('pointerdown', () => {
                if (type === 'play') this.playerPet.play(opt.action);
                if (type === 'train') this.playerPet.train(opt.action);
                this.ui.subMenu.destroy();
                this.ui.subMenu = null;
            });
            menuContainer.add(optText);
        });

        menuContainer.setPosition(anchorX, anchorY + 60); 

        menuContainer.setAlpha(0);
        this.tweens.add({
            targets: menuContainer,
            alpha: 1,
            duration: 200,
            ease: 'Power1'
        });
    }

    showGameOverPopup(message, subMessage) {
        // Hentikan semua interaksi UI lain
        this.children.list.forEach(child => {
            if (child.setInteractive) child.disableInteractive();
        });

        // Hentikan timer pet agar status tidak terus berkurang
        if (this.playerPet && this.playerPet.decayTimer) {
            this.playerPet.decayTimer.paused = true;
        }

        // Hide the pet sprite before showing the game over screen
        if (this.playerPet) {
            this.playerPet.hide();
        }

        // Buat instance dari GameOverPopup
        new GameOverPopup(this, 'GAME OVER', message, subMessage);
    }
    
    showEvolutionPopup(data) {
        if (this.playerPet) {
            this.playerPet.hide();
        }

        // Create the popup
        const evolutionPopup = new EvolutionPopup(this, data.newName, data.popupSpriteUrl);

        // Listen for when the popup is destroyed (closed)
        evolutionPopup.on('destroy', () => {
            // Show the now-evolved pet again
            if (this.playerPet) {
                this.playerPet.show();
            }
        });
    }

    showWonPopup(data) {
        // Hide the pet while the popup is active
        if (this.playerPet) {
            this.playerPet.hide();
        }

        const wonPopup = new WonPopup(this, data.name);

        // Listen for when the "Continue" button is clicked and the popup is destroyed
        wonPopup.on('destroy', () => {
            // Show the pet again
            if (this.playerPet) {
                this.playerPet.show();
            }
        });
    }
    
    shutdown() {
        console.log("Shutting down MainGameScene...");

        // 1. Hancurkan instance Pet untuk menghentikan timer dan membersihkan listener
        if (this.playerPet) {
            this.playerPet.destroy();
            this.playerPet = null;
        }

        // 2. Hancurkan semua popup yang mungkin masih ada
        if (this.ui.feedPopup) this.ui.feedPopup.destroy();
        if (this.ui.inventoryPopup) this.ui.inventoryPopup.destroy();
        if (this.ui.gameOverPopup) this.ui.gameOverPopup.destroy();
        
        // 3. Hapus listener dari scale manager untuk mencegah memory leak
        this.scale.off('resize', this.repositionUI, this);
    }

    // --- Positioning ---
    repositionUI() {
        const { width, height } = this.scale;
        if (!this.playerPet) return;
        
        // 1. Posisikan Pet di tengah, sedikit ke bawah
        this.playerPet.setPosition(width / 2, height / 2 + 100);

        // 2. Posisikan Level Text di tengah atas
        this.ui.levelText.setPosition(width / 2, height * 0.15);
        
        // Gambar ulang border untuk level text
        const textBounds = this.ui.levelText.getBounds();
        this.ui.levelBorder.clear()
            .lineStyle(3, 0xFFFFFF, 1)
            .strokeRoundedRect(textBounds.x - 4, textBounds.y - 4, textBounds.width + 8, textBounds.height + 8, 10);
        
        // 3. Posisikan Status Bars di kiri atas
        const statusStartX = width * 0.08;
        const statusStartY = height * 0.15;
        Object.values(this.ui.statusBars).forEach((element, index) => {
            element.container.setPosition(statusStartX, statusStartY + index * 50);
        });

        // 4. Posisikan Icon Panel di kanan atas
        const iconStartX = width * 0.92;
        this.ui.iconPanel.profile.setPosition(iconStartX, statusStartY);
        this.ui.iconPanel.bag.setPosition(iconStartX, statusStartY + 60);
        this.ui.iconPanel.home.setPosition(iconStartX, statusStartY + 120);

        // 5. Posisikan Tombol Aksi di bawah
        const buttonY = height * 0.9;
        const buttonSpacing = width * 0.22;
        const buttonStartX = width / 2 - (buttonSpacing * 1.5);
        this.ui.actionButtons.feed.setPosition(buttonStartX, buttonY);
        this.ui.actionButtons.sleep.setPosition(buttonStartX + buttonSpacing, buttonY);
        this.ui.actionButtons.training.setPosition(buttonStartX + buttonSpacing * 2, buttonY);
        this.ui.actionButtons.play.setPosition(buttonStartX + buttonSpacing * 3, buttonY);
    }
}

================
File: src/scenes/NamingScene.js
================
export default class NamingScene extends Phaser.Scene {
    constructor() {
        super('NamingScene');
        this.pokemonData = null;
        this.inputElement = null;
        this.confirmButton = null;
    }

    preload(){
        this.load.image('game-bg', 'assets/images/bgpokemon.png');
        this.load.image('input-bg', 'assets/images/icons/box-input.png');
        this.load.image('confirm-btn', 'assets/images/icons/confirm-hj.png');
        this.load.image('cancel-btn', 'assets/images/icons/cancel.png');
        this.load.image('title', 'assets/images/title.png');
        this.load.image('egg-sprite', 'assets/images/pokemon/egg.png');
    }

    create() {
        // Retrieve the chosen Pokémon data from the registry
        this.pokemonData = this.registry.get('playerPokemon');

        if (!this.pokemonData) {
            console.error("NamingScene: No Pokémon data found! Returning to home.");
            this.scene.start('Homescreen');
            return;
        }

        // --- Create UI Elements ---
        this.background = this.add.image(this.scale.width / 2, this.scale.height / 2, 'game-bg');
        this.title = this.add.image(0, 0, 'title');
        this.egg = this.add.image(0, 0, 'egg-sprite').setScale(1.5);
        this.inputBg = this.add.image(0, 0, 'input-bg');

        // HTML input field for the name
        this.domInputElement = this.add.dom(0, 0).createFromHTML(
            `<input type="text" name="nameField" placeholder="Input Pokémon Name" maxlength="12" style="width: 280px; height: 40px; border: none; background: transparent; font-size: 18px; color: #333; text-align: center; outline: none; font-family: 'Pixelify Sans', sans-serif;">`
        );
        this.inputElement = this.domInputElement.getChildByName('nameField');

        this.caption = this.add.text(0, 0, 'Are you sure you want to name it that?', {
            fontFamily: 'Pixelify Sans', fontSize: '20px', color: '#000'
        }).setOrigin(0.5);

        this.confirmButton = this.add.image(0, 0, 'confirm-btn');
        this.cancelButton = this.add.image(0, 0, 'cancel-btn');

        // --- Set up Event Listeners ---
        this.cancelButton.on('pointerdown', () => this.scene.start('Homescreen'));
        this.cancelButton.setInteractive({ useHandCursor: true });

        this.confirmButton.on('pointerdown', () => {
            if (this.confirmButton.alpha < 1) return; 
            
            const nickname = this.inputElement.value.trim();
            if (nickname) {
                this.pokemonData.nickname = nickname;
                this.registry.set('playerPokemon', this.pokemonData);
                this.scene.start('MainGameScene');
            }
        });

        // Add listener to enable/disable confirm button
        this.inputElement.addEventListener('keyup', this.validateInput.bind(this));

        [this.confirmButton, this.cancelButton].forEach(button => {
            button.on('pointerover', () => button.setScale(0.8));
            button.on('pointerout', () => button.setScale(0.5));
        });

        // Initial setup
        this.repositionElements();
        this.validateInput(); // Run once to set initial state of confirm button
        this.scale.on('resize', this.repositionElements, this);
    }

    validateInput() {
        const name = this.inputElement.value.trim();
        if (name.length > 0) {
            this.confirmButton.setAlpha(1).setInteractive({ useHandCursor: true });
        } else {
            this.confirmButton.setAlpha(0.5).disableInteractive();
        }
    }

    repositionElements() {
        const { width, height } = this.scale;

        this.title.setPosition(width / 2, height * 0.20).setScale(width / 1400);
        this.inputBg.setPosition(width / 2, height * 0.4).setScale(0.8);
        this.domInputElement.setPosition(width / 2, height * 0.4);
        this.egg.setPosition(width / 2, height / 2 + 100).setScale(0.7);
        this.caption.setPosition(width / 2, height * 0.78);
        const buttonY = height * 0.9;
        this.confirmButton.setPosition(width / 2 - 80, buttonY).setScale(0.5);
        this.cancelButton.setPosition(width / 2 + 80, buttonY).setScale(0.5);
    }
}

================
File: src/scenes/SearchPokemonScene.js
================
import * as PokeAPI from '../game/PokeAPIService.js';

export default class SearchPokemonScene extends Phaser.Scene {
    constructor() {
        super('SearchPokemonScene');

        // Properti untuk menyimpan elemen-elemen UI
        this.background = null;
        this.title = null;
        this.inputFieldContainer = null; // Gambar 'box-input.png'
        this.confirmButton = null;
        this.domInputElement = null;     // Elemen HTML untuk input
        this.inputField = null;          // Referensi ke <input>
        this.feedbackText = null;
    }

    preload() {
        // Aset yang sudah Anda definisikan
        this.load.image('choose-bg', 'assets/images/background.jpg');
        this.load.image('title', 'assets/images/title.png');
        this.load.image('confirmButton', 'assets/images/icons/confirm.png');
        this.load.image('inputField', 'assets/images/icons/box-input.png');
    }

    create() {
        // --- 1. Buat Semua Elemen Game ---
        this.background = this.add.image(0, 0, 'choose-bg');
        this.title = this.add.image(0, 0, 'title');
        this.inputFieldContainer = this.add.image(0, 0, 'inputField');
        this.confirmButton = this.add.image(0, 0, 'confirmButton').setInteractive({ cursor: 'pointer' });

        // --- 2. Buat Elemen Input HTML ---
        // Elemen HTML ini akan kita buat transparan dan letakkan di atas 'inputFieldContainer'
        const htmlForm = `
            <input type="text" name="searchInput" placeholder="Input pokemon index or name"
                   style="width: 300px; height: 40px; background: transparent; border: none; font-size: 18px; color: #333; text-align: center; outline: none; font-family: 'Pixelify Sans', sans-serif;">
        `;
        
        this.domInputElement = this.add.dom(0, 0).createFromHTML(htmlForm);
        this.inputField = this.domInputElement.getChildByName('searchInput');

        // --- 3. Atur Event Handling ---
        this.confirmButton.on('pointerdown', this.handleConfirm, this);
        this.input.keyboard.on('keydown-ENTER', this.handleConfirm, this);

        // Tambahkan event untuk kembali ke scene pilih pokemon (misalnya, dengan tombol ESC)
        this.input.keyboard.on('keydown-ESC', () => {
            this.scene.start('ChoosePokemonScene');
        });

        // --- 4. Atur Posisi & Event Resize ---
        this.repositionElements();
        this.scale.on('resize', this.repositionElements, this);
    }

    handleConfirm() {
        const pokemonName = this.inputField.value.trim().toLowerCase();

        if (!pokemonName) {
            this.showFeedbackMessage('Harap masukkan nama atau ID Pokémon!', 'red');
            return;
        }

        this.confirmButton.disableInteractive().setTint(0x888888);
        this.inputField.disabled = true;
        this.showFeedbackMessage(`Mencari ${pokemonName}...`, 'white');

        this.findPokemon(pokemonName);
    }

    async findPokemon(pokemonName) {
        const pokemonData = await PokeAPI.getPokemonData(pokemonName);

        if (pokemonData) {
            const sprites = PokeAPI.extractPokemonSprites(pokemonData);
            
            this.registry.set('playerPokemon', {
                data: pokemonData,
                sprites: sprites
            });

            this.showFeedbackMessage(`${pokemonData.name.toUpperCase()} ditemukan!`, '#32CD32'); // Hijau limau

            this.time.delayedCall(1500, () => {
                this.scene.start('NamingScene');
            });
        } else {
            this.showFeedbackMessage(`Pokémon "${pokemonName}" tidak ditemukan!`, 'red');
            
            this.confirmButton.setInteractive().clearTint();
            this.inputField.disabled = false;
        }
    }

    showFeedbackMessage(message, color) {
        if (this.feedbackText) {
            this.feedbackText.destroy();
        }

        const { width } = this.scale;
        this.feedbackText = this.add.text(this.confirmButton.x, this.confirmButton.y + 70, message, {
            fontFamily: 'Pixelify Sans', fontSize: '20px', color: color,
            stroke: '#000', strokeThickness: 4,
            align: 'center'
        }).setOrigin(0.5);

        // Hanya hapus pesan error atau sukses secara otomatis
        if (color !== 'white') {
            this.time.delayedCall(3000, () => {
                if (this.feedbackText) {
                    this.feedbackText.destroy();
                    this.feedbackText = null;
                }
            });
        }
    }

    repositionElements() {
        const { width, height } = this.scale;

        // Latar Belakang & Judul
        this.background.setPosition(width / 2, height / 2).setScale(Math.max(width / this.background.width, height / this.background.height));
        this.title.setPosition(width / 2, height * 0.20).setScale(width / 1400);

        // --- Posisikan Elemen Input Sesuai Gambar ---
        // Container/background untuk input field
        this.inputFieldContainer.setPosition(width / 2, height * 0.5);
        this.inputFieldContainer.setScale(1); // Sedikit diperbesar

        // Elemen DOM (input teks) diposisikan persis di atas containernya
        this.domInputElement.setPosition(this.inputFieldContainer.x, this.inputFieldContainer.y);

        // Tombol Confirm diposisikan di bawah input field
        this.confirmButton.setPosition(width / 2, this.inputFieldContainer.y + 150);

        // Posisikan ulang feedback text jika ada
        if (this.feedbackText) {
            this.feedbackText.setPosition(this.confirmButton.x, this.confirmButton.y + 70);
        }
    }
}

================
File: src/style.css
================
/* ==========================================================================
   1. Impor Font Kustom
   ========================================================================== */

@import url('https://fonts.googleapis.com/css2?family=Aldrich&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Pixelify+Sans&display=swap');


/* ==========================================================================
   2. Gaya Dasar Halaman & Kanvas
   ========================================================================== */

/* Reset dasar untuk konsistensi */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
  width: 100%;
  overflow: hidden; /* Mencegah scroll bar yang tidak diinginkan */
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #222; /* Warna latar belakang di sekitar game */
  font-family: Pixelify Sans, sans-serif, Arial; /* Font default untuk elemen HTML */
}

/* Aturan untuk kanvas game Phaser */
canvas {
  display: block;
}


/* ==========================================================================
   3. Gaya untuk Elemen HTML Overlay (Opsional)
   ========================================================================== */

/* 
   CATATAN PENTING:
   Aturan CSS di bawah ini HANYA akan berfungsi jika Anda menggunakan fitur 
   Phaser 'DOM Element' (this.add.dom(...)) untuk membuat UI dengan HTML. 
   Ini berguna untuk form, popup kompleks, atau menu. 
   Jika semua UI Anda dibuat dengan objek Phaser (gambar & teks), CSS ini tidak akan terpakai.
*/

/* --- Gaya Popup Umum --- */
.popup {
  background: #FFFEFF;
  border-radius: 15px;
  width: 300px;
  box-shadow: 0 0 20px rgba(0,0,0,0.3);
  display: flex;
  flex-direction: column;
  align-items: center;
  overflow: visible;
  border: 4px solid #D1D8FF;
  color: #000;
}

.popup-header {
  width: 100%;
  background-color: transparent;
  justify-content: center;
  align-items: center;
  display: flex;
  padding: 0;
  position: relative;
}

.popup-title {
  width: 100%;
  height: auto;
  display: block;
  padding: 6px;
}

.close-btn {
  position: absolute;
  right: 0;
  top: 0;
  background: transparent;
  border: none;
  cursor: pointer;
  width: 50px;
  height: 50px;
  padding: 0;
  z-index: 10;
}
.close-btn img { width: 100%; }
.close-btn:hover img { transform: scale(1.05); }

.popup-content {
  padding: 15px;
  text-align: center;
}
.evolved-pokemon {
  width: 200px;
  height: auto;
}
.pokemon-name {
  margin-top: 10px;
  font-size: 18px;
}

/* --- Gaya Popup Game Over --- */
.popup-text {
  padding: 30px 15px;
  text-align: center;
}
.popup-message {
  font-family: sans-serif;
  font-size: 18px;
  font-weight: bold;
}
.popup-submessage {
  font-family: sans-serif;
  font-size: 16px;
  margin-top: 5px;
}
.restart-btn {
  background: none; border: none; padding: 0; cursor: pointer; outline: none;
}
.restart-btn img { width: 100%; }
.restart-btn:hover img { transform: scale(1.05); }


/* --- Gaya Popup Feed --- */
.feed-popup {
  /* position, top, left, transform akan di-handle oleh Phaser.add.dom */
  z-index: 1000;
  display: flex;
  justify-content: left;
  align-items: center;
}

.popup-container {
  position: relative;
  width: 300px;
  height: 400px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.popup-bg {
  position: absolute;
  width: 100%;
  height: auto;
  z-index: 1;
}

.berry-grid {
  position: absolute;
  top: 60px;
  left: 5px;
  transform: translateX(5px);
  z-index: 2;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 12px;
  width: 90%;
}

.berry-item {
  border: 3px solid #6c5ce7;
  border-radius: 15px;
  padding: 15px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: all 0.3s ease;
}
.berry-item img {
  width: 50px;
  height: 50px;
  image-rendering: pixelated;
}
.berry-item:hover {
  transform: translateY(-3px) scale(1.05);
  border-color: #D3D9FF;
}

/* --- Gaya Menu Opsi (Play/Training) --- */
.option {
  width: 200px; /* Beri lebar agar bisa diposisikan */
}
.play-menu {
  list-style: none;
  font-size: 27px;
  margin-top: -170px; /* Disesuaikan dengan gambar 'option.png' */
  margin-left: -5px;
}
.play-menu li {
  position: relative;
  padding-left: 20px;
  margin: 8px 20px;
  cursor: pointer;
  color: #000;
}
.play-menu li::before {
  content: '▶';
  position: absolute;
  left: 0;
  top: 0;
  visibility: hidden;
}
.play-menu li:hover::before {
  visibility: visible;
}
.play-menu li:hover {
  text-decoration: underline;
}

/* ==========================================================================
   4. Gaya untuk Elemen DOM Kustom
   ========================================================================== */

/* Gaya untuk input field di SearchPokemonScene */
.pokemon-input {
  width: 200px; /* Sesuaikan dengan lebar gambar box-input.png */
  height: 50px; /* Sesuaikan dengan tinggi gambar box-input.png */
  padding: 10px;
  
  /* Hilangkan tampilan default browser */
  background: transparent;
  border: none;
  outline: none;
  
  /* Atur font dan teks */
  font-family: 'Pixelify Sans', sans-serif;
  font-size: 20px;
  color: #000000;
  text-align: center;
}

================
File: src/ui/EvolutionPopup.js
================
export default class EvolutionPopup extends Phaser.GameObjects.Container {
    constructor(scene, pokemonName, pokemonSpriteUrl) {
        // Position the container in the center of the screen
        super(scene, scene.scale.width / 2, scene.scale.height / 2);
        this.scene = scene;

        this.setDepth(200); // Set a high depth to appear over everything
        scene.add.existing(this);

        // --- Create UI Elements ---

        // 1. Semi-transparent background overlay
        const overlay = scene.add.graphics()
            .fillStyle(0x000000, 0.5)
            .fillRect(-this.x, -this.y, scene.scale.width, scene.scale.height);
        this.add(overlay);

        // 2. Main white popup box with rounded corners
        const boxWidth = 420;
        const boxHeight = 350;
        const cornerRadius = 20;
        const bg = scene.add.graphics()
            .fillStyle(0xffffff, 1)
            .fillRoundedRect(-boxWidth / 2, -boxHeight / 2, boxWidth, boxHeight, cornerRadius);
        this.add(bg);

        // 3. Blue header bar
        const headerHeight = 60;
        const header = scene.add.graphics()
            .fillStyle(0x1DA1F2, 1) // A nice light blue color
            .fillRoundedRect(-boxWidth / 2, -boxHeight / 2, boxWidth, headerHeight, { tl: cornerRadius, tr: cornerRadius, bl: 0, br: 0 });
        this.add(header);

        // 4. "Upgrade!" text in the header
        const titleText = scene.add.text(0, -boxHeight / 2 + headerHeight / 2, 'Upgrade!', {
            fontFamily: 'Arial, sans-serif', fontSize: '24px', color: '#ffffff', fontStyle: 'bold'
        }).setOrigin(0.5);
        this.add(titleText);

        // 5. Green "X" close button
        const closeButton = this.createCloseButton(boxWidth / 2 - 35, -boxHeight / 2 + 30);
        closeButton.on('pointerdown', this.close, this);
        this.add(closeButton);

        // 6. Pokémon Name Text (placeholder, will be positioned later)
        const nameText = scene.add.text(0, 120, pokemonName.charAt(0).toUpperCase() + pokemonName.slice(1), {
            fontFamily: 'Arial, sans-serif', fontSize: '22px', color: '#333333'
        }).setOrigin(0.5);
        this.add(nameText);

        // 7. Dynamically load and display the Pokémon sprite
        this.loadAndDisplaySprite(pokemonName, pokemonSpriteUrl);

        // --- Animate the popup entrance ---
        this.setScale(0.8);
        this.setAlpha(0);
        scene.tweens.add({
            targets: this,
            scale: 1,
            alpha: 1,
            duration: 300,
            ease: 'Power2'
        });
    }

    createCloseButton(x, y) {
        const container = this.scene.add.container(x, y);
        const circle = this.scene.add.graphics().fillStyle(0x2ECC71, 1).fillCircle(0, 0, 18);
        const xMark = this.scene.add.text(0, -1, '✕', { fontSize: '24px', color: '#ffffff' }).setOrigin(0.5);
        container.add([circle, xMark]);
        container.setSize(36, 36).setInteractive({ useHandCursor: true });
        return container;
    }

    loadAndDisplaySprite(name, url) {
        const spriteKey = `evolved_${name}`;

        const addSprite = () => {
            const sprite = this.scene.add.image(0, 20, spriteKey).setScale(2.5);
            // Ensure pixel art remains sharp
            sprite.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
            this.add(sprite);
        }

        // Load the image only if it doesn't already exist
        if (this.scene.textures.exists(spriteKey)) {
            addSprite();
        } else {
            this.scene.load.image(spriteKey, url);
            this.scene.load.once('complete', addSprite);
            this.scene.load.start();
        }
    }

    close() {
        this.scene.tweens.add({
            targets: this,
            scale: 0.8,
            alpha: 0,
            duration: 200,
            ease: 'Power1',
            onComplete: () => {
                this.destroy(); // This will emit the 'destroy' event
            }
        });
    }
}

================
File: src/ui/FeedPopup.js
================
import * as PokeAPI from '../game/PokeAPIService.js';

export default class FeedPopup extends Phaser.GameObjects.Container {
    constructor(scene, x, y, petInstance) {
        super(scene, x, y);
        this.scene = scene;
        this.petInstance = petInstance;
        
        this.setDepth(100);
        scene.add.existing(this);

        const bg = scene.add.image(0, 0, 'feed-box').setScale(0.7).setOrigin(0, 0);
        this.add(bg);
        const closeButton = scene.add.image(bg.displayWidth - 15, 15, 'closeButton')
            .setScale(0.4).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', this.closePopup, this);
        this.add(closeButton);

        // Container untuk grid, agar mudah dihapus dan dibuat ulang
        this.gridContainer = scene.add.container(0, 0);
        this.add(this.gridContainer);

        this.refreshGrid();
        
        // Dengarkan event perubahan inventaris untuk me-refresh grid
        this.petInstance.on('onInventoryChange', this.refreshGrid, this);
    }

    populateGrid() {
        this.refreshGrid();
    }

    async createPopup() {
        // Background popup
        const bg = this.scene.add.image(0, 0, 'feed-box').setScale(0.8).setOrigin(0.5, 1);
        this.add(bg); // Tambahkan bg ke container ini

        // Teks feedback
        const feedbackText = this.scene.add.text(0, -bg.displayHeight/2, 'Loading...', { fontFamily: 'Pixelify Sans', fontSize: '20px' }).setOrigin(0.5);
        feedbackText.setName('feedbackText');
        this.add(feedbackText);

        // Tombol close
        const closeButton = this.scene.add.image(bg.displayWidth/2 - 20, -bg.displayHeight + 20, 'closeButton').setScale(0.4).setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', this.closePopup, this);
        this.add(closeButton);
        
        // Mulai proses memuat dan menampilkan grid berry
        await this.refreshGrid();
    }
    
    // Fungsi ini dipanggil pertama kali dan setiap kali inventaris berubah
    refreshGrid() {
        this.gridContainer.removeAll(true);
        const inventory = this.petInstance.stats.inventory.Berries || {};
        const berryNames = Object.keys(inventory);

        if (berryNames.length === 0) {
            const noBerriesText = this.scene.add.text(this.list[0].displayWidth / 2, 100, 'No berries!', {
                fontFamily: 'Pixelify Sans', fontSize: '20px'
            }).setOrigin(0.5);
            this.gridContainer.add(noBerriesText);
            return;
        }

        const gridCols = 3;
        const colWidth = 80;
        const rowHeight = 80;
        const startX = 45;
        const startY = 60;

        berryNames.forEach((name, index) => {
            if (inventory[name] > 0 && this.scene.textures.exists(`berry_${name}`)) {
                const row = Math.floor(index / gridCols);
                const col = index % gridCols;
                const x = startX + col * colWidth;
                const y = startY + row * rowHeight;

                const itemContainer = this.scene.add.container(x, y);
                itemContainer.setSize(70, 70);
                itemContainer.setInteractive({ cursor: 'pointer' });

                const itemBg = this.scene.add.graphics().fillStyle(0xdcc8ff, 1).fillRoundedRect(-35, -35, 70, 70, 10);
                const berrySprite = this.scene.add.image(0, -5, `berry_${name}`).setScale(1.2);
                const countText = this.scene.add.text(20, 25, `x${inventory[name]}`, { fontFamily: 'Pixelify Sans', fontSize: '14px', color: '#333' }).setOrigin(0.5);
                itemContainer.add([itemBg, berrySprite, countText]);

                const berryNameToFeed = name; 

                itemContainer.on('pointerdown', () => {
                    console.log(`Clicked on: ${berryNameToFeed}`);
                    if (this.petInstance.stats.inventory.Berries[berryNameToFeed] > 0) {
                        this.petInstance.feed(berryNameToFeed);
                    }
                });

                this.gridContainer.add(itemContainer);
            } else {
                if (!this.scene.textures.exists(`berry_${name}`)) {
                    console.warn(`Texture 'berry_${name}' tidak ditemukan saat mencoba membuat grid.`);
                }
            }
        });
    }

    closePopup() {
        this.scene.tweens.add({
            targets: this,
            alpha: 0,
            scale: 0.9,
            duration: 150,
            ease: 'Power1',
            onComplete: () => {
                this.destroy();
            }
        });
    }

    // Override fungsi destroy untuk membersihkan event listener
    destroy(fromScene) {
        // Hapus listener dari pet agar tidak terjadi memory leak
        this.petInstance.off('onInventoryChange', this.refreshGrid, this);
        // Panggil destroy dari parent class
        super.destroy(fromScene);
    }
}

================
File: src/ui/GameOverPopup.js
================
export default class GameOverPopup extends Phaser.GameObjects.Container {
    constructor(scene, title, message, subMessage) {
        // Posisikan container di tengah layar
        super(scene, scene.scale.width / 2, scene.scale.height / 2);

        this.scene = scene;

        // Set depth yang sangat tinggi agar selalu di atas
        this.setDepth(200);

        // Tambahkan container ini ke scene
        scene.add.existing(this);

        // --- Mulai membuat elemen UI ---

        // 1. Lapisan overlay gelap di belakang popup
        const overlay = scene.add.graphics()
            .fillStyle(0x000000, 0.6)
            .fillRect(-this.x, -this.y, scene.scale.width, scene.scale.height);
        this.add(overlay);

        // 2. Background putih dengan sudut melengkung
        const boxWidth = 450;
        const boxHeight = 300;
        const bg = scene.add.graphics()
            .fillStyle(0xffffff, 1)
            .fillRoundedRect(-boxWidth / 2, -boxHeight / 2, boxWidth, boxHeight, 20);
        this.add(bg);

        // 3. Header merah dengan gambar 'GAME OVER'
        const headerHeight = 60;
        const header = scene.add.graphics()
            .fillStyle(0xd40000, 1) // Warna merah
            .fillRoundedRect(-boxWidth / 2, -boxHeight / 2, boxWidth, headerHeight, { tl: 20, tr: 20, bl: 0, br: 0 });
        this.add(header);

        const gameOverTitle = scene.add.image(0, -boxHeight / 2 + headerHeight / 2, 'gameoverTitle').setScale(0.8);
        this.add(gameOverTitle);

        // 4. Tombol Close (X)
        const closeButton = scene.add.image(boxWidth / 2 - 30, -boxHeight / 2 + 30, 'closeButton')
            .setScale(0.6).setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', this.closeAndRestart, this);
        this.add(closeButton);

        // 5. Teks Pesan
        const messageStyle = { fontFamily: 'Arial', fontSize: '24px', color: '#333', align: 'center', wordWrap: { width: boxWidth - 40 } };
        const subMessageStyle = { fontFamily: 'Arial', fontSize: '18px', color: '#555', align: 'center', wordWrap: { width: boxWidth - 40 } };

        const messageText = scene.add.text(0, -30, message, messageStyle).setOrigin(0.5);
        this.add(messageText);
        
        const subMessageText = scene.add.text(0, 20, subMessage, subMessageStyle).setOrigin(0.5);
        this.add(subMessageText);
        
        // 6. Tombol Restart
        const restartButton = scene.add.image(0, 100, 'restartButton').setScale(0.7).setInteractive({ cursor: 'pointer' });
        restartButton.on('pointerdown', this.closeAndRestart, this);
        this.add(restartButton);

        // --- Animasi saat muncul ---
        this.setScale(0.8);
        this.setAlpha(0);
        scene.tweens.add({
            targets: this,
            scale: 1,
            alpha: 1,
            duration: 300,
            ease: 'Power2'
        });
    }

    closeAndRestart() {
        this.scene.tweens.add({
            targets: this,
            scale: 0.8,
            alpha: 0,
            duration: 200,
            ease: 'Power1',
            onComplete: () => {
                // Hancurkan semua UI dan reset state
                this.scene.playerPet.destroy();
                
                // Kembali ke scene awal (Homescreen)
                this.scene.scene.start('Homescreen');
                
                this.destroy();
            }
        });
    }
}

================
File: src/ui/InventoryPopup.js
================
export default class InventoryPopup extends Phaser.GameObjects.Container {
    constructor(scene, x, y, petInstance) {
        super(scene, x, y);
        this.scene = scene;
        this.petInstance = petInstance;
        this.itemTexts = []; 

        scene.add.existing(this);

        this.setDepth(100);
        this.createPopup();

        // Tambahkan listener untuk update UI saat inventaris berubah
        this.petInstance.on('onInventoryChange', this.updateItemList, this);
    }

    createPopup() {
        const bg = this.scene.add.image(0, 0, 'inventory').setOrigin(0.5).setScale(0.5);
        this.add(bg);

        // 2. Tombol Close
        const closeButton = this.scene.add.image(bg.displayWidth / 2 - 35, -bg.displayHeight / 2 + 35, 'closeButton')
            .setScale(0.6)
            .setOrigin(0.5)
            .setInteractive({ cursor: 'pointer' });
        
        closeButton.on('pointerdown', this.close, this);
        this.add(closeButton);
        
        // 3. Container untuk daftar item, agar mudah di-refresh
        this.itemListContainer = this.scene.add.container(0, 0);
        this.add(this.itemListContainer);
        
        // 4. Buat dan tampilkan daftar item awal
        this.updateItemList();
    }

    updateItemList() {
        // Hapus item lama sebelum menggambar ulang
        this.itemListContainer.removeAll(true);
        this.itemTexts = [];

        // Gabungkan semua item dari kategori yang berbeda
        const inventory = this.petInstance.stats.inventory;
        const allItems = {
            ...(inventory.General || {}),
            'Berries': Object.values(inventory.Berries || {}).reduce((sum, count) => sum + count, 0)
        };

        const itemNames = Object.keys(allItems);

        // --- PERUBAHAN KUNCI #4: Sesuaikan Tata Letak Teks untuk Ukuran Baru ---
        const bgRef = this.list[0]; // Ambil referensi background yang sudah diskalakan
        const startY = -bgRef.displayHeight / 2 + 120; // Mulai lebih rendah
        const lineHeight = 55;  // Beri jarak lebih besar
        const nameX = -bgRef.displayWidth / 2 + 250; // Beri padding kiri lebih banyak
        const countX = bgRef.displayWidth / 2 - 50;  // Beri padding kanan lebih banyak

        if (itemNames.length === 0 || (itemNames.length === 1 && itemNames[0] === 'Berries' && allItems['Berries'] === 0)) {
            const emptyText = this.scene.add.text(0, 0, 'Bag is empty.', {
                fontFamily: 'Pixelify Sans', fontSize: '20px', color: '#5c3e27'
            }).setOrigin(0.5);
            this.itemListContainer.add(emptyText);
            return;
        }

        itemNames.forEach((name, index) => {
            if (name === 'Berries' && allItems[name] === 0) return;
            const yPos = startY + (index * lineHeight);
            const formattedName = name.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

            const nameText = this.scene.add.text(nameX, yPos, formattedName, {
                fontFamily: 'Arial',
                fontSize: '20px', // Perbesar font
                color: '#3d3d3d',
                fontStyle: 'bold'
            }).setOrigin(0, 0.5);

            const countText = this.scene.add.text(countX, yPos, `x ${allItems[name]}`, {
                fontFamily: 'Arial',
                fontSize: '20px', // Perbesar font
                color: '#3d3d3d',
                fontStyle: 'bold'
            }).setOrigin(1, 0.5);

            this.itemListContainer.add([nameText, countText]);
            this.itemTexts.push({ name: nameText, count: countText });
        });
    }

    close() {
        // Animasi saat menutup popup
        this.scene.tweens.add({
            targets: this,
            scale: 0.9,
            alpha: 0,
            duration: 150,
            ease: 'Power1',
            onComplete: () => {
                this.destroy();
            }
        });
    }

    // Override destroy untuk membersihkan listener
    destroy(fromScene) {
        this.petInstance.off('onInventoryChange', this.updateItemList, this);
        super.destroy(fromScene);
    }
}

================
File: src/ui/ProfilePopup.js
================
// src/ui/ProfilePopup.js
import * as PokeAPI from '../game/PokeAPIService.js';

// Helper object for styling weakness types
const typeColors = {
    normal: '#A8A77A',
    fire: '#EE8130',
    water: '#6390F0',
    electric: '#F7D02C',
    grass: '#7AC74C',
    ice: '#96D9D6',
    fighting: '#C22E28',
    poison: '#A33EA1',
    ground: '#E2BF65',
    flying: '#A98FF3',
    psychic: '#F95587',
    bug: '#A6B91A',
    rock: '#B6A136',
    ghost: '#735797',
    dragon: '#6F35FC',
    dark: '#705746',
    steel: '#B7B7CE',
    fairy: '#D685AD',
};

export default class ProfilePopup {
    constructor(scene, petInstance, onCloseCallback) {
        this.scene = scene;
        this.petInstance = petInstance;
        this.pokemonData = petInstance.pokemonData;
        this.spriteData = petInstance.spriteUrls;
        this.onClose = onCloseCallback;
        this.domElement = null;

        // Start the process of creating the popup
        this.createPopup();
    }

    async createPopup() {
        // Create a loading placeholder
        const loadingText = this.scene.add.text(this.scene.scale.width / 2, this.scene.scale.height / 2, 'Loading Profile...', {
            fontSize: '32px', fontFamily: 'Pixelify Sans', color: '#ffffff', backgroundColor: '#000000'
        }).setOrigin(0.5).setDepth(201);

        try {
            // --- Fetch all necessary data in parallel for speed ---
            const [speciesData, evolutionData, weaknesses] = await Promise.all([
                this.fetchData(this.pokemonData.species.url),
                this.fetchEvolutionChainData(this.pokemonData.species.url),
                this.fetchWeaknesses(this.pokemonData.types),
            ]);

            // --- Build the HTML with all the fetched data ---
            const popupHTML = this.buildHTML(speciesData, evolutionData, weaknesses);
            this.domElement = this.scene.add.dom(this.scene.scale.width / 2, this.scene.scale.height / 2).createFromHTML(popupHTML);
            this.domElement.setDepth(200);

            // Add event listeners for the buttons inside the HTML
            this.addEventListeners();

        } catch (error) {
            console.error("Failed to create profile popup:", error);
            // Optionally show an error message to the user
        } finally {
            // Remove the loading text once done
            loadingText.destroy();
        }
    }

    // --- Data Fetching Methods ---

    async fetchData(url) {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch ${url}`);
        return response.json();
    }

    async fetchEvolutionChainData(speciesUrl) {
        const speciesData = await this.fetchData(speciesUrl);
        const evolutionChainData = await this.fetchData(speciesData.evolution_chain.url);

        const chain = [];
        let currentStage = evolutionChainData.chain;

        do {
            const stageSpecies = await this.fetchData(currentStage.species.url);
            const stagePokemon = await PokeAPI.getPokemonData(stageSpecies.name);
            chain.push({
                name: stageSpecies.name,
                sprite: stagePokemon.sprites.front_default,
            });
            currentStage = currentStage.evolves_to[0];
        } while (currentStage);

        return chain;
    }

    async fetchWeaknesses(types) {
        const weaknessSet = new Set();
        const typePromises = types.map(typeInfo => this.fetchData(typeInfo.type.url));
        const typeDetails = await Promise.all(typePromises);

        typeDetails.forEach(typeData => {
            typeData.damage_relations.double_damage_from.forEach(weakness => {
                weaknessSet.add(weakness.name);
            });
        });

        return Array.from(weaknessSet);
    }

    // --- HTML Building Method ---

    buildHTML(species, evolutionChain, weaknesses) {
        // Helper function to find English flavor text
        const getFlavorText = () => {
            const englishEntry = species.flavor_text_entries.find(entry => entry.language.name === 'en');
            return englishEntry ? englishEntry.flavor_text.replace(/\f/g, ' ') : 'No story available.';
        };

        const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);

        const weaknessButtons = weaknesses.map(name =>
            `<button style="background-color:${typeColors[name] || '#777'}; color:white; border:none; padding: 8px 16px; border-radius: 15px; font-weight: bold; cursor: pointer;">
                ${capitalize(name)}
            </button>`
        ).join('');

        const evolutionSprites = evolutionChain.map(stage =>
            `<div style="text-align: center;">
                <div style="background-color: #FEEEEE; border-radius: 50%; width: 70px; height: 70px; display: flex; align-items: center; justify-content: center; border: 2px solid #FDC0C0;">
                    <img src="${stage.sprite}" style="width: 60px; height: 60px;">
                </div>
                <p style="font-size: 14px; margin-top: 5px;">${capitalize(stage.name)}</p>
            </div>`
        ).join('<div style="align-self: center; width: 30px; border-top: 2px solid #FDC0C0; margin: 0 10px;"></div>');
        
        const abilities = this.pokemonData.abilities.map(a => capitalize(a.ability.name)).join(', ');
        
        return `
        <div id="profile-popup" style="
            width: 800px; 
            background: white; 
            border-radius: 20px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
            display: grid; 
            grid-template-columns: 320px 1fr; 
            padding: 25px; 
            gap: 20px;
            font-family: Pixelify Sans;
            position: relative;
        ">
            <!-- Close Button -->
            <div id="profile-close-btn" style="position:absolute; top: 15px; right: 15px; width: 40px; height: 40px; background: #E74C3C; border-radius: 50%; color: white; display: flex; align-items: center; justify-content: center; font-size: 20px; cursor: pointer; font-weight: bold;">✕</div>

            <!-- Left Column -->
            <div style="display: flex; flex-direction: column; align-items: center;">
                <div style="width: 100%; padding: 10px; background: #E8A95E; color: white; border-radius: 20px; text-align: center; font-size: 20px; font-weight: bold; margin-bottom: 20px;">
                    ${capitalize(this.pokemonData.name)}
                </div>
                <img id="profile-sprite" src="${this.spriteData.default}" style="width: 200px; height: 200px; image-rendering: pixelated; margin-bottom: 20px;">
                <div style="display: flex; justify-content: space-around; align-items: center; width: 100%;">
                    ${evolutionSprites}
                </div>
            </div>

            <!-- Right Column -->
            <div>
                <h3 style="margin-top:0;">Weaknesses</h3>
                <div style="display: flex; gap: 10px; margin-bottom: 15px;">${weaknessButtons}</div>
                
                <h3>Story</h3>
                <p style="margin-bottom: 15px;">${getFlavorText()}</p>
                
                <h3>Version</h3>
                <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                    <button id="normal-btn" class="version-btn active" style="border: 2px solid #EF8E18; background: #EF8E18; color: white; padding: 8px 20px; border-radius: 15px; font-weight: bold; cursor: pointer;">Normal</button>
                    <button id="shiny-btn" class="version-btn" style="border: 2px solid #ddd; background: white; color: #333; padding: 8px 20px; border-radius: 15px; font-weight: bold; cursor: pointer;">Shiny</button>
                </div>

                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px;">
                    <div style="border: 2px solid #FFC5BA; border-radius: 8px; padding: 10px; text-align: center;">
                        <div>Category</div><div style="font-weight: bold;">${capitalize(species.genera.find(g => g.language.name === 'en').genus)}</div>
                    </div>
                    <div style="border: 2px solid #FFC5BA; border-radius: 8px; padding: 10px; text-align: center;">
                        <div>Gender</div><div style="font-weight: bold; font-size: 18px;"><span style="color:#42A5F5;">♂</span> <span style="color:#EC407A;">♀</span></div>
                    </div>
                    <div style="border: 2px solid #FFC5BA; border-radius: 8px; padding: 10px; text-align: center;">
                        <div>Abilities</div><div style="font-weight: bold;">${abilities}</div>
                    </div>
                    <div style="border: 2px solid #FFC5BA; border-radius: 8px; padding: 10px; text-align: center;">
                        <div>Height</div><div style="font-weight: bold;">${this.pokemonData.height / 10} m</div>
                    </div>
                    <div style="border: 2px solid #FFC5BA; border-radius: 8px; padding: 10px; text-align: center;">
                        <div>Weight</div><div style="font-weight: bold;">${this.pokemonData.weight / 10} kg</div>
                    </div>
                </div>
            </div>
        </div>
        `;
    }

    addEventListeners() {
        const closeBtn = this.domElement.getChildByID('profile-close-btn');
        closeBtn.addEventListener('click', () => this.close());

        const normalBtn = this.domElement.getChildByID('normal-btn');
        const shinyBtn = this.domElement.getChildByID('shiny-btn');
        const spriteImg = this.domElement.getChildByID('profile-sprite');

        normalBtn.addEventListener('click', () => {
            spriteImg.src = this.pokemonData.sprites.front_default;
            normalBtn.style.background = '#EF8E18';
            normalBtn.style.color = 'white';
            normalBtn.style.borderColor = '#EF8E18';
            shinyBtn.style.background = 'white';
            shinyBtn.style.color = '#333';
            shinyBtn.style.borderColor = '#ddd';
        });

        shinyBtn.addEventListener('click', () => {
            spriteImg.src = this.pokemonData.sprites.front_shiny;
            shinyBtn.style.background = '#EF8E18';
            shinyBtn.style.color = 'white';
            shinyBtn.style.borderColor = '#EF8E18';
            normalBtn.style.background = 'white';
            normalBtn.style.color = '#333';
            normalBtn.style.borderColor = '#ddd';
        });
    }

    close() {
        // Animate out and destroy
        this.scene.tweens.add({
            targets: this.domElement,
            scale: 0.9,
            alpha: 0,
            duration: 150,
            ease: 'Power1',
            onComplete: () => {
                if (this.onClose) {
                    this.onClose();
                }
                this.destroy();
            }
        });
    }

    destroy() {
        if (this.domElement) {
            this.domElement.destroy();
            this.domElement = null;
        }
    }
}

================
File: src/ui/WonPopup.js
================
// src/ui/WonPopup.js

export default class WonPopup extends Phaser.GameObjects.Container {
    constructor(scene, pokemonName) {
        super(scene, scene.scale.width / 2, scene.scale.height / 2);
        this.scene = scene;

        this.setDepth(200); // Appear on top of everything
        scene.add.existing(this);

        // --- Create UI Elements ---
        const boxWidth = 450;
        const boxHeight = 250;
        const cornerRadius = 20;

        // 1. Background overlay
        const overlay = scene.add.graphics().fillStyle(0x000000, 0.5).fillRect(-this.x, -this.y, scene.scale.width, scene.scale.height);
        this.add(overlay);

        // 2. Main white popup box
        const bg = scene.add.graphics().fillStyle(0xffffff, 1).fillRoundedRect(-boxWidth / 2, -boxHeight / 2, boxWidth, boxHeight, cornerRadius);
        this.add(bg);

        // 3. Title Text
        const titleText = scene.add.text(0, -boxHeight/2 + 40, 'Congratulations!', {
            fontFamily: 'Arial, sans-serif', fontSize: '28px', color: '#333', fontStyle: 'bold'
        }).setOrigin(0.5);
        this.add(titleText);
        
        // 4. Message Text
        const capitalizedName = pokemonName.charAt(0).toUpperCase() + pokemonName.slice(1);
        const messageText = scene.add.text(0, -boxHeight/2 + 90, `${capitalizedName} has reached its final form!`, {
            fontFamily: 'Arial, sans-serif', fontSize: '18px', color: '#555', align: 'center'
        }).setOrigin(0.5);
        this.add(messageText);

        // 5. Create Buttons
        const continueButton = this.createButton(boxWidth / 4, 60, 'Continue', '#2ecc71');
        const replayButton = this.createButton(-boxWidth / 4, 60, 'Replay', '#3498db');
        
        continueButton.on('pointerdown', () => this.close());
        replayButton.on('pointerdown', () => {
            this.scene.scene.start('HomescreenScene');
        });

        this.add([continueButton, replayButton]);

        // --- Animate Entrance ---
        this.setScale(0.8).setAlpha(0);
        scene.tweens.add({
            targets: this, scale: 1, alpha: 1, duration: 300, ease: 'Power2'
        });
    }

    createButton(x, y, text, color) {
        const button = this.scene.add.container(x, y);
        const bg = this.scene.add.graphics().fillStyle(Phaser.Display.Color.HexStringToColor(color).color).fillRoundedRect(-70, -22, 140, 44, 15);
        const label = this.scene.add.text(0, 0, text, { fontSize: '20px', color: '#ffffff', fontStyle: 'bold' }).setOrigin(0.5);
        button.add([bg, label]);
        button.setSize(140, 44).setInteractive({ useHandCursor: true });
        return button;
    }

    close() {
        this.scene.tweens.add({
            targets: this,
            scale: 0.8,
            alpha: 0,
            duration: 200,
            ease: 'Power1',
            onComplete: () => {
                this.destroy(); // This emits the 'destroy' event for the scene to listen to
            }
        });
    }
}
